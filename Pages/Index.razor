@page "/"

@using GanttEF.Models
@using Syncfusion.Blazor.Gantt
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor

<SfGantt ID="GanttExport" TValue="TaskDatum" Height="450px" Width="700px" LoadChildOnDemand="true"
         Toolbar="@(new List<string>(){ "Add", "Edit", "Update", "Delete", "Cancel", "ExpandAll", "CollapseAll"})">
    <SfDataManager AdaptorInstance="@typeof(CustomAdaptor)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
    <GanttColumns>
        <GanttColumn Field=@nameof(TaskDatum.TaskId) Width="100"></GanttColumn>
        <GanttColumn Field=@nameof(TaskDatum.TaskName) Width="250"></GanttColumn>
        <GanttColumn Field=@nameof(TaskDatum.StartDate)></GanttColumn>
        <GanttColumn Field=@nameof(TaskDatum.EndDate)></GanttColumn>
        <GanttColumn Field=@nameof(TaskDatum.Progress)></GanttColumn>
    </GanttColumns>
    <GanttEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" AllowTaskbarEditing="true" ShowDeleteConfirmDialog="true" NewRowPosition="RowPosition.Child"></GanttEditSettings>
    <GanttTimelineSettings>
        <GanttTopTierSettings Unit="TimelineViewMode.Week" Format="MMM dd, y"></GanttTopTierSettings>
        <GanttBottomTierSettings Unit="TimelineViewMode.Day"></GanttBottomTierSettings>
    </GanttTimelineSettings>
    <GanttTaskFields Id="TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Progress="Progress"
                     ParentID="ParentId" Duration="Duration"></GanttTaskFields>
</SfGantt>

@code {
    // Implementing custom adaptor by extending the DataAdaptor class.
    public class CustomAdaptor : DataAdaptor
    {
        EfContext db = new EfContext();
        // Performs data Read operation.
        public override object Read(DataManagerRequest dm, string key = null)
        {
            IEnumerable<TaskDatum> DataSource = db.TaskData;
            int count = DataSource.Cast<TaskDatum>().Count();
            return dm.RequiresCounts ? new DataResult() { Result = DataSource, Count = count } : (object)DataSource;
        }

        // Performs CRUD operation.
        public override object BatchUpdate(DataManager dm, object changedRecords, object addedRecords, object deletedRecords, string keyField, string key, int? dropIndex)
        {
            List<TaskDatum> addRecord = addedRecords as List<TaskDatum>;
            List<TaskDatum> changed = changedRecords as List<TaskDatum>;
            List<TaskDatum> deleteRecord = deletedRecords as List<TaskDatum>;
            if (changed != null)
            {
                for (var i = 0; i < changed.Count(); i++)
                {
                    var value = changed[i];
                    TaskDatum result = db.TaskData.Where(or => or.TaskId == value.TaskId).FirstOrDefault();
                    result.TaskId = value.TaskId;
                    result.TaskName = value.TaskName;
                    result.StartDate = value.StartDate;
                    result.EndDate = value.EndDate;
                    result.Progress = value.Progress;
                    result.Duration = value.Duration;
                    db.SaveChanges();
                }
            }
            if (deleteRecord != null)
            {
                for (var i = 0; i < deleteRecord.Count(); i++)
                {
                    db.TaskData.Remove(db.TaskData.Where(or => or.TaskId == deleteRecord[i].TaskId).FirstOrDefault());
                    db.SaveChanges();
                }
            }
            if (addRecord != null)
            {
                for (var i = 0; i < addRecord.Count(); i++)
                {
                    db.TaskData.Add(addRecord[i] as TaskDatum);
                    db.SaveChanges();
                }
            }
            return (new { addedRecords = addRecord, changedRecords = changed, deletedRecords = deleteRecord });
        }
    }
}